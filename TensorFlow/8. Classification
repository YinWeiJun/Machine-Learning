MNIST 数据 
==========
    首先准备数据（MNIST库）

            from tensorflow.examples.tutorials.mnist import input_data
            mnist = input_data.read_data_sets('MNIST_data', one_hot=True)
        
    数据中包含55000张训练图片，每张图片的分辨率是28×28，所以我们的训练网络输入应该是28×28=784个像素数据。
    
搭建网络
=======
            xs = tf.placeholder(tf.float32, [None, 784]) # 28x28
        
    每张图片都表示一个数字，所以我们的输出是数字0到9，共10类。

            ys = tf.placeholder(tf.float32, [None, 10])
            
    调用add_layer函数搭建一个最简单的训练网络结构，只有输入层和输出层。

            prediction = add_layer(xs, 784, 10, activation_function=tf.nn.softmax)
            
Cross entropy loss
==================
    loss函数（即最优化目标函数）选用交叉熵函数。交叉熵用来衡量预测值和真实值的相似程度，如果完全相同，它们的交叉熵等于零。

            cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),
            reduction_indices=[1])) # loss
            
    train方法（最优化算法）采用梯度下降法。

            train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)
            sess = tf.Session()
            
    # tf.initialize_all_variables() 这种写法马上就要被废弃
    # 替换成下面的写法:
    
            sess.run(tf.global_variables_initializer())
            
训练
====
    现在开始train，每次只取100张图片，免得数据太多训练太慢。

            batch_xs, batch_ys = mnist.train.next_batch(100)
            sess.run(train_step, feed_dict={xs: batch_xs, ys: batch_ys})
            
    每训练50次输出一下预测精度

            if i % 50 == 0:
                    print(compute_accuracy(
                        mnist.test.images, mnist.test.labels))
                        
    
ALL CODE
========
       """
        Please note, this code is only for python 3+. If you are using python 2+, please modify the code accordingly.
        """
        from __future__ import print_function
        import tensorflow as tf
        from tensorflow.examples.tutorials.mnist import input_data
        # number 1 to 10 data
        mnist = input_data.read_data_sets('MNIST_data', one_hot=True)

        def add_layer(inputs, in_size, out_size, activation_function=None,):
            # add one more layer and return the output of this layer
            Weights = tf.Variable(tf.random_normal([in_size, out_size]))
            biases = tf.Variable(tf.zeros([1, out_size]) + 0.1,)
            Wx_plus_b = tf.matmul(inputs, Weights) + biases
            if activation_function is None:
                outputs = Wx_plus_b
            else:
                outputs = activation_function(Wx_plus_b,)
            return outputs

        def compute_accuracy(v_xs, v_ys):
            global prediction
            y_pre = sess.run(prediction, feed_dict={xs: v_xs})
            correct_prediction = tf.equal(tf.argmax(y_pre,1), tf.argmax(v_ys,1))
            accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
            result = sess.run(accuracy, feed_dict={xs: v_xs, ys: v_ys})
            return result

        # define placeholder for inputs to network
        xs = tf.placeholder(tf.float32, [None, 784]) # 28x28
        ys = tf.placeholder(tf.float32, [None, 10])

        # add output layer
        prediction = add_layer(xs, 784, 10,  activation_function=tf.nn.softmax)

        # the error between prediction and real data
        cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),
                                                      reduction_indices=[1]))       # loss
        train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

        sess = tf.Session()
        # important step
        # tf.initialize_all_variables() no long valid from
        # 2017-03-02 if using tensorflow >= 0.12
        if int((tf.__version__).split('.')[1]) < 12 and int((tf.__version__).split('.')[0]) < 1:
            init = tf.initialize_all_variables()
        else:
            init = tf.global_variables_initializer()
        sess.run(init)

        for i in range(1000):
            batch_xs, batch_ys = mnist.train.next_batch(100)
            sess.run(train_step, feed_dict={xs: batch_xs, ys: batch_ys})
            if i % 50 == 0:
                print(compute_accuracy(
                    mnist.test.images, mnist.test.labels))
                    
                    
                    
                    
                    
